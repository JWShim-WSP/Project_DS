from django.shortcuts import render
from django.urls import reverse, reverse_lazy
from .models import ToDoList, ToDoItemList
from .forms import ToDoItemForm, ToDoForm
from django.views.generic import ListView, CreateView, UpdateView, DeleteView

# Create your views here.
# Let's go to CBV than FBV above
class TodoListListView(ListView):
    model = ToDoList
    context_object_name = 'todolist' # you can omit this to use default name, 'object'
    template_name = 'todolist/todolist.html' # you can omit this to use default template name, 'Post_list.html'

class TodoItemListView(ListView):
    model = ToDoItemList
    context_object_name = 'todoitemlist'
    template_name = 'todolist/todoitemlist.html'

    def get_queryset(self):
        return ToDoItemList.objects.filter(todo_list_id=self.kwargs["list_id"])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["todo_list"] = ToDoList.objects.get(id=self.kwargs["list_id"])
        return context

# CreateView: A view that displays a form for creating an object, redisplaying the form with any validation errors highlighted, and eventually saving the object.
# Therefore, simply call the CBV of ListCreate and ItemCreate with display the form and save the new objects in db
class ListCreate(CreateView):
    form_class = ToDoForm
    template_name = 'todolist/todolist_form.html'

    def get_context_data(self, **kwargs):
        context = super(ListCreate, self).get_context_data(**kwargs)
        context["title"] = "Add a new list"
        return context
    # when the list item is created successfully, it returns to the "get_absolute_url" defined in model.py automatically.

class ItemCreate(CreateView):
    form_class = ToDoItemForm
    template_name = 'todolist/todoitemlist_form.html'

    def get_initial(self):
        initial_data = super(ItemCreate, self).get_initial()
        todo_list = ToDoList.objects.get(id=self.kwargs["list_id"])
        initial_data["todo_list"] = todo_list
        return initial_data

    def get_context_data(self, **kwargs):
        context = super(ItemCreate, self).get_context_data(**kwargs)
        todo_list = ToDoList.objects.get(id=self.kwargs["list_id"])
        context["todo_list"] = todo_list
        context["title"] = "Create a new item"
        return context

    def get_success_url(self):
        return reverse("todolist:todoitemlist", args=[self.object.todo_list_id])

# ItemUpdate will extend the generic view class UpdateView. This is quite similar to CreateView, and you can use the same template for both. The main difference is that the ItemUpdate view will pre-populate the template form with the data from an existing ToDoItem.
# The generic views know how to handle the POST request generated by the form on a successful submit action.
class ItemUpdate(UpdateView):
    model = ToDoItemList
    form_class = ToDoItemForm
    template_name = 'todolist/todoitemlist_form.html'

    def get_context_data(self, **kwargs):
        context = super(ItemUpdate, self).get_context_data(**kwargs)
        context["todo_list"] = self.object.todo_list
        context["title"] = "Edit item"
        return context

    def get_success_url(self):
        return reverse("todolist:todoitemlist", args=[self.object.todo_list_id])

class ListDelete(DeleteView):
    model = ToDoList
    # You have to use reverse_lazy() instead of reverse(),
    # as the urls are not loaded when the file is imported.
    success_url = reverse_lazy("todolist:todolist")

class ItemDelete(DeleteView):
    model = ToDoItemList

    def get_success_url(self):
        return reverse_lazy("todolist:todoitemlist", args=[self.kwargs["list_id"]])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["todo_list"] = self.object.todo_list
        return context